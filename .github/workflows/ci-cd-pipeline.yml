name: CI/CD Workflow

on:
  pull_request:
    branches:
      - develop
      - master
  push:
    branches:
      - develop
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Build docker image for testing the client
        run: docker build -f ./client/Dockerfile.dev -t test/client ./client
        
      - name: Run tests
        run: docker run -e CI=true test/client npm run test

  build:
    name: Build docker images and push to docker repo
    runs-on: ubuntu-latest
    needs: test
    if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') && github.event_name == 'push'
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      SHA: $(git rev-parse HEAD)
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Build all docker images for the project
        run: python -u ./scripts/build.py

      - name: Push all docker images to repo
        run: python -u ./scripts/push.py
        env:
          DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}

  deploy_to_production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: PROD
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      # This step sets authentication creds for Google Cloud SDK (gcloud CLI) using a service account key
      - name: Set Service Key
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      # This step authenticates with GCP using the creds from previous step and configures the gcloud CLI to use a specific GCP project
      - name: Set Project
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.PROJECT_ID }}

      # This step is not needed since we use Docker Hub. If we use GCR or something similar we need to uncomment this step
      # This step configures Docker to authenticate with Google Container Registry (GCR) or Artifact Registry
      #- name: Auth
      #  run: gcloud --quiet auth configure-docker

      # This step retrieves the GKE cluster credentials and sets up kubectl to work with retreived credentials
      # allowing it to interact with the specified cluster
      - name: Get Credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ vars.CLUSTER_NAME }}
          location: ${{ vars.LOCATION }}

      - name: Deploy
        run: python -u ./scripts/deploy.py
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          SHA: $(git rev-parse HEAD)
